package jump61;

import java.util.LinkedList;

import static jump61.Color.*;

/** A Jump61 board state.
 *  @author Allen Yu
 */
class MutableBoard extends Board {

    /** An N x N board in initial configuration. */
    MutableBoard(int N) {
        super();
        _N = N;
        jumping = false;
        board = new Square[size()][size()];
        clear(size());
    }

    /** A board whose initial contents are copied from BOARD0. Clears the
     *  undo history. */
    MutableBoard(Board board0) {
        super();
        jumping = false;
        board = new Square[size()][size()];
        copy(board0);
    }

    @Override
    void clear(int N) {
        for (int i = 0; i < size(); i++) {
            for (int j = 0; j < size(); j++) {
                board[i][j] = new Square();
            }
        }
        _N = N;
        _moves = 0;
        setWhoseMove(RED);
        stack.clear();
    }

    @Override
    void copy(Board board2) {
        board = new Square[board2.size()][board2.size()];
        for (int i = 0; i < size(); i++) {
            for (int k = 0; k < size(); k++) {
                board[i][k] = board2.board[i][k];
            }
        }
    }

    @Override
    int size() {
        return _N;
    }

    @Override
    int spots(int r, int c) {
        return getSquare(r,c).spots();
    }

    @Override
    int spots(int n) {
        return getSquare(n).spots();
    }

    @Override
    Color color(int r, int c) {
        return getSquare(r,c).color();
    }

    @Override
    Color color(int n) {
        return getSquare(n).color();
    }

    @Override
    int numMoves() {
        return _moves;
    }

    @Override
    int numOfColor(Color color) {
        int count = 0;
        for (int i = 0; i < size(); i++) {
            for (int j = 0; j < size(); j++) {
                if (board[i][j].color().equals(color)) {
                    count += 1;
                }
            }
        }
        return count;
    }

    @Override
    void addSpot(Color player, int r, int c) {
        getSquare(r, c).addspot();
        getSquare(r, c).setcolor(player);
        if (getSquare(r, c).spots() > neighbors(r, c) && !jumping) {
            jumping = true;
            jump(sqNum(r, c));
            checkNeighbors(sqNum(r, c));
            jumping = false;
        }
        if (!jumping) {
            addStack();
        }
    }

    @Override
    void addSpot(Color player, int n) {
        getSquare(n).addspot();
        getSquare(n).setcolor(player);
        if (getSquare(n).spots() > neighbors(n) && !jumping) {
            jumping = true;
            jump(n);
            checkNeighbors(n);
            jumping = false;
        }
        if (!jumping) {
            addStack();
        }
    }

    /** Checks the neighboring squares of the current square
     *  that is jumping. Jumps these squares if they are also
     *  overfilled. */
    private void checkNeighbors(int n) {
        if (exists(n - size()) && overfull(n - size())) {
            jump(n - size());
        }
        if (exists(n + size()) && overfull(n + size())) {
            jump(n + size());
        }
        if (exists(n + 1) && overfull(n + 1) && (n + 1) % size() != 0) {
            jump(n + 1);
        }
        if (exists(n - 1) && overfull(n - 1) && n % size() != 0) {
            jump(n - 1);
        }
    }

    /** Returns true if this current square is overfull. */
    private boolean overfull(int pos) {
        if (getSquare(pos).spots() > neighbors(pos)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    void set(int r, int c, int num, Color player) {
        board[r - 1][c - 1] = new Square(num, player);
        stack.clear();
    }

    @Override
    void set(int n, int num, Color player) {
        if (getSquare(n) != null) {
            getSquare(n).setcolor(player);
            getSquare(n).setSpots(num);
        }
        board[row(n) - 1][col(n) - 1] = new Square(num, player);
        stack.clear();
    }

    @Override
    void setMoves(int num) {
        assert num > 0;
        _moves = num;
        stack.clear();
    }

    @Override
    void undo() {
        String prev = stack.removeLast();
        if (prev.equals(hash())) {
            prev = stack.removeLast();
        }
        char[] items = prev.toCharArray();
        Board prevboard = new MutableBoard(size());
        int iter = 0;
        for (int i = 0; i < size(); i++) {
            for (int k = 0; k < size(); k++) {
                if (items[iter] == 'x') {
                    prevboard.board[i][k] = new Square();
                } else {
                    int spots = Integer.parseInt(String.valueOf(items[iter]));
                    String str = String.valueOf(items[iter + 1]);
                    Color color;
                    if (str.equals("r")) {
                        color = RED;
                    } else {
                        color = BLUE;
                    }
                    prevboard.board[i][k] = new Square(spots, color);
                    iter += 1;
                }
                iter += 1;
            }
        }
        this.copy(prevboard);
    }

    /** Adds another stack onto the undostack. */
    private void addStack() {
        stack.add(hash());
    }

    /** Do all jumping on this board, assuming that initially, S is the only
     *  square that might be over-full. */
    private void jump(int S) {
        if (getSquare(S).spots() > neighbors(S)) {
            if (exists(S - size())) {
                addSpot(whoseMove(), S - size());
            }
            if (exists(S - 1) && S % size() != 0) {
                addSpot(whoseMove(), S - 1);
            }
            if (exists(S + 1) && (S + 1) % size() != 0) {
                addSpot(whoseMove(), S + 1);
            }
            if (exists(S + size())) {
                addSpot(whoseMove(), S + size());
            }
            getSquare(S).spill();
        }
    }

    /** Total combined number of moves by both sides. */
    protected int _moves;
    /** Convenience variable: size of board (squares along one edge). */
    private int _N;
    /** True if my board is currently jumping. */
    private boolean jumping;
    /** An UndoStack that keeps track of each move and stores them as a
     *  string to represent the board. */
    private LinkedList<String> stack = new LinkedList<String>();
}
