package make;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

/** Initial class for the 'make' program.
 *  @author Allen Yu
 */
public final class Main {

    /** Entry point for the CS61B make program.  ARGS may contain options
     *  and targets:
     *      [ -f MAKEFILE ] [ -D FILEINFO ] TARGET1 TARGET2 ...
     */
    public static void main(String... args) {
        String makefileName;
        String fileInfoName;

        if (args.length == 0) {
            usage();
        }

        makefileName = "Makefile";
        fileInfoName = "fileinfo";

        int a;
        for (a = 0; a < args.length; a += 1) {
            if (args[a].equals("-f")) {
                a += 1;
                if (a == args.length) {
                    usage();
                } else {
                    makefileName = args[a];
                }
            } else if (args[a].equals("-D")) {
                a += 1;
                if (a == args.length) {
                    usage();
                } else {
                    fileInfoName = args[a];
                }
            } else if (args[a].startsWith("-")) {
                usage();
            } else {
                break;
            }
        }

        ArrayList<String> targets = new ArrayList<String>();

        for (; a < args.length; a += 1) {
            targets.add(args[a]);
        }

        make(makefileName, fileInfoName, targets);
    }

    /** Carry out the make procedure using MAKEFILENAME as the makefile,
     *  taking information on the current file-system state from FILEINFONAME,
     *  and building TARGETS, or the first target in the makefile if TARGETS
     *  is empty.
     */
    private static void make(String makefileName, String fileInfoName,
                             List<String> targets) {
        // FILL IN
    }

    /** Reads and processes the FILEINFONAME. Maps all the NAME in it to their
     *  respective CHANGEDATE. Throws FileNotFoundException if there is no such
     *  file. */
    private void readFileInfoName(String fileInfoName) throws FileNotFoundException {
        Scanner input = new Scanner(new File(fileInfoName));
        currTime = Integer.valueOf(input.nextLine());
        while (input.hasNextLine()) {
            String[] line = input.nextLine().split("\\s+");
            fileInfoMap.put(line[0], Integer.valueOf(line[1]));
        }
        input.close();
    }

    /** Reads and processes the MAKEFILENAME. Creates a mapping of the Rule's
     *  header to its respective command set dependencies. throws
     *  FileNotFoundException if there is no such file. */
    private void readMakeFileName(String makefileName) throws FileNotFoundException {
        Scanner input = new Scanner(new File(makefileName));
        while (input.hasNextLine()) {
            String[] line = input.nextLine().split("\\s+");
            if (line.length != 0 && !line[0].equals("#")) {
                String target = line[0].substring(0, line[0].length() - 1);
                ArrayList<String> d = new ArrayList<String>();
                for (int i = 1; i < line.length; i++) {
                    d.add(line[i]);
                }
                header.put(target, d);
                ArrayList<String> duties = new ArrayList<String>();
                while (input.hasNextLine()) {
                    String line2 = input.nextLine();
                    String[] check = line2.split("\\s+");
                    if (check.length != 0 && !check[0].equals("#")) {
                        duties.add(line2);
                    }
                }
                rules.put(target, duties);
            }
        }
        input.close();
    }

    /** Print a brief usage message and exit program abnormally. */
    private static void usage() {
        System.out.println("an error has occured");
        System.exit(1);
    }

    /** The mapping of NAMES to their respective CHANGEDATE in the 
     *  FILEINFONAME. */
    private HashMap<String, Integer> fileInfoMap;

    /** The mapping of the Rule's target name to their respective list of
     *  command line. */
    private HashMap<String, ArrayList<String>> rules;
    /** The mapping of the Rule's header to the rest of its command set
     *  dependencies. */
    private HashMap<String, ArrayList<String>> header;

    /** The current time that is in FILEINFONAME. */
    private int currTime;

}
