package graph;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/* Do not add or remove public or protected members, or modify the signatures of
 * any public methods.  You may make methods in Graph abstract, if you want
 * different implementations in DirectedGraph and UndirectedGraph.  You may
 * add bodies to abstract methods, modify existing bodies, or override
 * inherited methods. */

/** Represents a general graph whose vertices are labeled with a type
 *  VLABEL and whose edges are labeled with a type ELABEL. The
 *  vertices are represented by the inner type Vertex and edges by
 *  inner type Edge.  A graph may be directed or undirected.  For
 *  an undirected graph, outgoing and incoming edges are the same.
 *  The vertices and edges of the graph, the edges incident on a
 *  vertex, and the neighbors of a vertex are all accessible by
 *  iterators.  Changing the graph's structure by adding or deleting
 *  edges or vertices invalidates these iterators (subsequent use of
 *  them is undefined.)
 *  @author Allen Yu
 */
public abstract class Graph<VLabel, ELabel> {

    /** Represents one of my vertices. */
    public class Vertex {

        /** A new vertex with LABEL as the value of getLabel(). */
        Vertex(VLabel label) {
            _label = label;
            nodes[0] = new ArrayList<Vertex>();
            nodes[1] = new ArrayList<Vertex>();
            nodes[2] = new ArrayList<Vertex>();
            pointers[0] = new ArrayList<Edge>();
            pointers[1] = new ArrayList<Edge>();
            pointers[2] = new ArrayList<Edge>();
        }

        /** Returns the label on this vertex. */
        public VLabel getLabel() {
            return _label;
        }

        /** Returns all the vertices for an undirected graph. */
        public ArrayList<Vertex> uVertex() {
            return nodes[2];
        }

        /** Returns the children of this vertex. */
        public ArrayList<Vertex> getChildren() {
            return nodes[0];
        }

        /** Returns the parents of this vertex. */
        public ArrayList<Vertex> getParent() {
            return nodes[1];
        }

        /** Adds the EDGE to my outEdges. */
        public void addOutEdge(Edge edge) {
            pointers[0].add(edge);
            pointers[2].add(edge);
            nodes[0].add(edge.getV1());
            nodes[2].add(edge.getV1());
        }

        /** Returns the edges that point away from this vertex. */
        public ArrayList<Edge> outEdges() {
            return pointers[0];
        }

        /** Returns the undirected edges. */
        public ArrayList<Edge> uEdges() {
            return pointers[2];
        }

        /** Adds the EDGE to my inEdges. */
        public void addInEdge(Edge edge) {
            pointers[1].add(edge);
            pointers[2].add(edge);
            nodes[1].add(edge.getV0());
            nodes[2].add(edge.getV0());
        }

        /** Returns the edges that point to this vertex. */
        public ArrayList<Edge> inEdges() {
            return pointers[1];
        }

        /** Removes an edge from this vertex with given LABEL.
         *  Does nothing if there is no such edge*/
        public void removeOutEdge(ELabel label) {
            ArrayList<Edge> outList = pointers[0];
            for(int i = 0; i < outList.size(); i++) {
                if (outList.get(i).getLabel().equals(label)) {
                    outList.remove(i);
                }
            }
            ArrayList<Edge> outList2 = pointers[2];
            for(int i = 0; i < outList2.size(); i++) {
                if (outList2.get(i).getLabel().equals(label)) {
                    outList2.remove(i);
                }
            }
        }

        /** Removes an edge from this vertex with given LABEL.
         *  Does nothing if there is no such edge*/
        public void removeInEdge(ELabel label) {
            ArrayList<Edge> inList = pointers[1];
            for(int i = 0; i < inList.size(); i++) {
                if (inList.get(i).getLabel().equals(label)) {
                    inList.remove(i);
                }
            }
            ArrayList<Edge> inList2 = pointers[2];
            for(int i = 0; i < inList2.size(); i++) {
                if (inList2.get(i).getLabel().equals(label)) {
                    inList2.remove(i);
                }
            }
        }

        @Override
        public String toString() {
            return String.valueOf(_label);
        }

        /** The label on this vertex. */
        private final VLabel _label;
        /** The Array where the children of this vertex is at index
         *  0 and the parent of this vertex is at index 1. */
        private ArrayList<Vertex>[] nodes = (ArrayList<Vertex>[]) new ArrayList[3];
        /** The Array where the edges that point away from this vertex
         *  is at the index 0 and the edges that point to this vertex
         *  is at the index 1. */
        private ArrayList<Edge>[] pointers = (ArrayList<Edge>[]) new ArrayList[3];
    }

    /** Represents one of my edges. */
    public class Edge {

        /** An edge (V0,V1) with label LABEL.  It is a directed edge (from
         *  V0 to V1) in a directed graph. */
        Edge(Vertex v0, Vertex v1, ELabel label) {
            _label = label;
            _v0 = v0;
            _v1 = v1;
        }

        /** Returns the label on this edge. */
        public ELabel getLabel() {
            return _label;
        }

        /** Return the vertex this edge exits. For an undirected edge, this is
         *  one of the incident vertices. */
        public Vertex getV0() {
            return _v0;
        }

        /** Return the vertex this edge enters. For an undirected edge, this is
         *  the incident vertices other than getV1(). */
        public Vertex getV1() {
            return _v1;
        }

        /** Returns the vertex at the other end of me from V.  */
        public final Vertex getV(Vertex v) {
            if (v == _v0) {
                return _v1;
            } else if (v == _v1) {
                return _v0;
            } else {
                throw new
                    IllegalArgumentException("vertex not incident to edge");
            }
        }

        @Override
        public String toString() {
            return String.format("(%s,%s):%s", _v0, _v1, _label);
        }

        /** Endpoints of this edge.  In directed edges, this edge exits _V0
         *  and enters _V1. */
        private final Vertex _v0, _v1;

        /** The label on this edge. */
        private final ELabel _label;

    }

    /*=====  Methods and variables of Graph =====*/

    /** Returns the number of vertices in me. */
    public int vertexSize() {
        return vertices.size();
    }

    /** Returns the number of edges in me. */
    public int edgeSize() {
        return edges.size();
    }

    /** Returns true iff I am a directed graph. */
    public abstract boolean isDirected();

    /** Returns the number of outgoing edges incident to V. Assumes V is one of
     *  my vertices.  */
    public int outDegree(Vertex v) {
        return v.outEdges().size();
    }

    /** Returns the number of incoming edges incident to V. Assumes V is one of
     *  my vertices. */
    public int inDegree(Vertex v) {
        return v.inEdges().size();
    }

    /** Returns outDegree(V). This is simply a synonym, intended for
     *  use in undirected graphs. */
    public final int degree(Vertex v) {
        return outDegree(v);
    }

    /** Returns true iff there is an edge (U, V) in me with any label. */
    public boolean contains(Vertex u, Vertex v) {
        for (int i = 0; i < edges.size(); i++) {
            if (edges.get(i).getV0().getLabel() == u.getLabel()
                    && edges.get(i).getV1().getLabel() == v.getLabel()) {
                return true;
            }
        }
        return false;
    }

    /** Returns true iff there is an edge (U, V) in me with label LABEL. */
    public boolean contains(Vertex u, Vertex v, ELabel label) {
        for (int i = 0; i < edges.size(); i++) {
            if (edges.get(i).getV0() == u && edges.get(i).getV1() == v
                    && edges.get(i).getLabel() == label) {
                return true;
            }
        }
        return false;
    }

    /** Returns the vertex given the specific LABEL. If there is no such
     *  vertex, returns null. */
    public Vertex getVertex(VLabel label) {
        for (Vertex vtx: vertices) {
            if (vtx.getLabel().equals(label)) {
                return vtx;
            }
        }
        return null;
    }

    /** Returns a new vertex labeled LABEL, and adds it to me with no
     *  incident edges. */
    public Vertex add(VLabel label) {
        Vertex currvertex = new Vertex(label);
        vertices.add(currvertex);
        return currvertex;
    }

    /** Returns the edge given the specific LABEL. If there is no such
     *  edge, returns null. */
     public Edge getEdge(ELabel label) {
         for (Edge edge: edges) {
             if (edge.getLabel().equals(label)) {
                 return edge;
             }
         }
         return null;
     }

    /** Returns an edge incident on FROM and TO, labeled with LABEL
     *  and adds it to this graph. If I am directed, the edge is directed
     *  (leaves FROM and enters TO). */
    public Edge add(Vertex from,
                    Vertex to,
                    ELabel label) {
        Edge currEdge = new Edge(from, to, label);
        edges.add(currEdge);
        from.addOutEdge(currEdge);
        to.addInEdge(currEdge);
        if (!vertices.contains(from)) {
            vertices.add(from);
        }
        if (!vertices.contains(to)){
            vertices.add(to);
        }
        return currEdge;
    }

    /** Returns an edge incident on FROM and TO with a null label
     *  and adds it to this graph. If I am directed, the edge is directed
     *  (leaves FROM and enters TO). */
    public Edge add(Vertex from,
                    Vertex to) {
        Edge currEdge = new Edge(from, to, null);
        edges.add(currEdge);
        from.addOutEdge(currEdge);
        to.addInEdge(currEdge);
        if (!vertices.contains(from)) {
            vertices.add(from);
        }
        if (!vertices.contains(to)){
            vertices.add(to);
        }
        return currEdge;
    }

    /** Remove V and all adjacent edges, if present. */
    public void remove(Vertex v) {
        for (int i = 0; i < vertices.size(); i++) {
            if (vertices.get(i).getLabel() == v.getLabel()) {
                vertices.remove(i);
                break;
            }
        }
        for (int j = 0; j < edges.size(); j++) {
            if (edges.get(j).getV0().getLabel() == v.getLabel()) {
                Vertex otherVtx = edges.get(j).getV1();
                otherVtx.removeInEdge(edges.get(j).getLabel());
                edges.remove(j);
                j -= 1;
            } else if (edges.get(j).getV1().getLabel() == v.getLabel()) {
                Vertex otherVtx = edges.get(j).getV0();
                otherVtx.removeOutEdge(edges.get(j).getLabel());
                edges.remove(j);
                j -= 1;
            }
        }
    }

    /** Remove E from me, if present.  E must be between my vertices,
     *  or the result is undefined.  */
    public void remove(Edge e) {
        for (int i = 0; i < edges.size(); i++) {
            if (edges.get(i).getLabel() == e.getLabel()) {
                edges.remove(i);
                break;
            }
        }
        Vertex from = e.getV0();
        from.removeOutEdge(e.getLabel());
        Vertex to = e.getV1();
        to.removeInEdge(e.getLabel());
    }

    /** Remove all edges from V1 to V2 from me, if present.  The result is
     *  undefined if V1 and V2 are not among my vertices.  */
    public void remove(Vertex v1, Vertex v2) {
        ArrayList<Edge> outlist = v1.outEdges();
        for (int i = 0; i < outlist.size(); i++) {
            if (outlist.get(i).getV1().getLabel() == v2.getLabel()) {
                outlist.remove(i);
                i -= 1;
            }
        }
    }

    /** Returns an Iterator over all vertices in arbitrary order. */
    public Iteration<Vertex> vertices() {
        return Iteration.iteration(vertices);
    }

    /** Returns an iterator over all successors of V. */
    public Iteration<Vertex> successors(Vertex v) {
        return Iteration.iteration(v.getChildren());
    }

    /** Returns an iterator over all predecessors of V. */
    public Iteration<Vertex> predecessors(Vertex v) {
        return Iteration.iteration(v.getParent());
    }

    /** Returns successors(V).  This is a synonym typically used on
     *  undirected graphs. */
    public final Iteration<Vertex> neighbors(Vertex v) {
        return successors(v);
    }

    /** Returns an iterator over all edges in me. */
    public Iteration<Edge> edges() {
        return Iteration.iteration(edges);
    }

    /** Returns iterator over all outgoing edges from V. */
    public Iteration<Edge> outEdges(Vertex v) {
        return Iteration.iteration(v.outEdges());
    }

    /** Returns iterator over all incoming edges to V. */
    public Iteration<Edge> inEdges(Vertex v) {
        return Iteration.iteration(v.inEdges());
    }

    /** Returns outEdges(V). This is a synonym typically used
     *  on undirected graphs. */
    public final Iteration<Edge> edges(Vertex v) {
        return outEdges(v);
    }

    /** Returns the natural ordering on T, as a Comparator.  For
     *  example, if stringComp = Graph.<Integer>naturalOrder(), then
     *  stringComp.compare(x1, y1) is <0 if x1<y1, ==0 if x1=y1, and >0
     *  otherwise. */
    public static <T extends Comparable<? super T>> Comparator<T> naturalOrder()
    {
        return new Comparator<T>() {
            @Override
            public int compare(T x1, T x2) {
                return x1.compareTo(x2);
            }
        };
    }

    /** Cause subsequent traversals and calls to edges() to visit or deliver
     *  edges in sorted order, according to COMPARATOR. Subsequent
     *  addition of edges may cause the edges to be reordered
     *  arbitrarily.  */
    public void orderEdges(Comparator<ELabel> comparator) {
        Collections.sort(edges, edgeComparator(comparator));
    }

    /** Returns an edge comparator given the ELabel comparator COMP. */
    private Comparator<Edge> edgeComparator(final Comparator<ELabel> comp) {
        Comparator<Edge> newComp = new Comparator<Edge>() {
            @Override
            public int compare(Edge e1, Edge e2) {
                int value = comp.compare(e1.getLabel(), e2.getLabel());
                if (value != 0) {
                    return value;
                } else {
                    return 1;
                }
            }
        };
        return newComp;
    }

    /** The collection of vertices in this graph. */
    private ArrayList<Vertex> vertices = new ArrayList<Vertex>();
    /** The collection of edges in this graph. */
    private ArrayList<Edge> edges = new ArrayList<Edge>();

}
