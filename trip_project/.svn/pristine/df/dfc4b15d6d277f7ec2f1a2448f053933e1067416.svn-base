package make;

import graph.DirectedGraph;
import graph.Graph;
import graph.Traversal;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;

/** Initial class for the 'make' program.
 *  @author Allen Yu
 */
public final class Main {

    /** Entry point for the CS61B make program.  ARGS may contain options
     *  and targets:
     *      [ -f MAKEFILE ] [ -D FILEINFO ] TARGET1 TARGET2 ...
     */
    public static void main(String... args) {
        String makefileName;
        String fileInfoName;

        if (args.length == 0) {
            usage();
        }

        makefileName = "Makefile";
        fileInfoName = "fileinfo";

        int a;
        for (a = 0; a < args.length; a += 1) {
            if (args[a].equals("-f")) {
                a += 1;
                if (a == args.length) {
                    usage();
                } else {
                    makefileName = args[a];
                }
            } else if (args[a].equals("-D")) {
                a += 1;
                if (a == args.length) {
                    usage();
                } else {
                    fileInfoName = args[a];
                }
            } else if (args[a].startsWith("-")) {
                usage();
            } else {
                break;
            }
        }

        ArrayList<String> targets = new ArrayList<String>();

        for (; a < args.length; a += 1) {
            targets.add(args[a]);
        }

        make(makefileName, fileInfoName, targets);
    }

    /** Carry out the make procedure using MAKEFILENAME as the makefile,
     *  taking information on the current file-system state from FILEINFONAME,
     *  and building TARGETS, or the first target in the makefile if TARGETS
     *  is empty.
     */
    private static void make(String makefileName, String fileInfoName,
                             List<String> targets) {
        try {
            ArrayList<String> fileInfoTargets = new ArrayList<String>();
            readFileInfoName(fileInfoName, fileInfoTargets);
            readMakeFileName(makefileName);
            DirectedGraph<String, String> G =
                    new DirectedGraph<String, String>();
            HashMap<String, Graph<String, String>.Vertex> vertices =
                    initGraph(G, _targets);
            grabFileInfoT(G, fileInfoTargets, vertices, _targets);
            BuildMakeGraph B = new BuildMakeGraph(vertices, header, _targets);
            if (!targets.isEmpty()) {
                for (int i = 0; i < targets.size(); i++) {
                    B.depthFirstTraverse(G, vertices.get(targets.get(i)));
                }
            } else {
                Graph<String, String>.Vertex firstVtx = vertices.get(_targets.get(0));
                B.depthFirstTraverse(G, firstVtx);
            }
        } catch (FileNotFoundException e) {
            System.err.println("FileNotFoundException: " + e.getMessage());
            System.exit(1);
        }
    }

    /** Creates vertices for each target in FILEINFO into VERTICES
     *  of a given graph G and adds them to TARGETS. */
    private static void grabFileInfoT(Graph<String, String> G,
            ArrayList<String> fileInfoTargets,
            HashMap<String, Graph<String, String>.Vertex> vertices,
            ArrayList<String> targets) {
        for (String x: fileInfoTargets) {
            vertices.put(x, G.add(x));
            targets.add(x);
        }
    }

    /** Reads this one rule from the list of headers and creates a dependecny
     *  graph. */
    private static class BuildMakeGraph extends Traversal<String, String> {

        public BuildMakeGraph(HashMap<String, Graph<String, String>.Vertex> vertices,
                HashMap<String, ArrayList<String>> headers,
                ArrayList<String> t) {
            makeMap = vertices;
            preReq = headers;
            targets = t;
            circle = new HashSet<String>();
            done = new HashSet<String>();
        }

        public void preVisit(Graph<String, String>.Edge e,
                Graph<String, String>.Vertex v) {
            if (!done.contains(e.getV(v).getLabel())) {
                if (!targets.contains(e.getV(v).getLabel())) {
                    System.err.println("unknown target");
                    System.exit(1);
                }
            }
        }

        public void visit(Graph<String, String>.Vertex v) {
            if (!done.contains(v.getLabel())
                    || fileInfoMap.get(v.getLabel()) < currTime) {
                circle.add(v.getLabel());
                fileInfoMap.remove(v.getLabel());
                fileInfoMap.put(v.getLabel(), currTime);
                if (preReq.get(v.getLabel()) == null) {
                } else {
                    for (String x : preReq.get(v.getLabel())) {
                        Graph<String, String>.Vertex v1 = makeMap.get(x);
                        if (v1 == null) {
                            System.err.println("unknown target");
                            System.exit(1);
                        } else if (circle.contains(x)) {
                            System.err.println("circular dependency detected");
                            System.exit(1);
                        }
                        _graph.add(v, v1, v.getLabel() + " to " + v1.getLabel());
                    }
                }
            }
        }

        public void postVisit(Graph<String, String>.Vertex v) {
            if (!done.contains(v.getLabel())) {
                done.add(v.getLabel());
                circle.remove(v.getLabel());
                if (preReq.get(v.getLabel()) != null) {
                    for (String x: rules.get(v.getLabel())) {
                        System.out.println(x);
                    }
                }
            }
        }

        /** The map that associates vertices' names to the vertex. */
        private HashMap<String, Graph<String, String>.Vertex> makeMap;
        /** The map that associates the target and its preReq. */
        private HashMap<String, ArrayList<String>> preReq;
        /** The Set that contains all my targets. */
        private ArrayList<String> targets;
        /** The set that determines if there is a circular dependency
         *  in the Graph. */
        private HashSet<String> circle;
        /** The set that determines if this target is already post visited. */
        private HashSet<String> done;
    }

    /** Returns the HashMap of all strings of given TARGETS to their vertices
     *  of the GRAPH. */
    private static HashMap<String, Graph<String, String>.Vertex> initGraph(
                   Graph<String, String> graph, ArrayList<String> targets) {
        HashMap<String, Graph<String, String>.Vertex> vertices =
                new HashMap<String, Graph<String, String>.Vertex>();
        for (String x: targets) {
            vertices.put(x, graph.add(x));
        }
        return vertices;
    }

    /** Reads and processes the FILEINFONAME. Maps all the NAME in it to their
     *  respective CHANGEDATE. Throws FileNotFoundException if there is no such
     *  file. */
    private static void readFileInfoName(String fileInfoName, ArrayList<String> list)
            throws FileNotFoundException {
        Scanner input = new Scanner(new File(fileInfoName));
        fileInfoMap = new HashMap<String, Integer>();
        currTime = Integer.valueOf(input.nextLine());
        while (input.hasNextLine()) {
            String[] line = input.nextLine().split("\\s+");
            list.add(line[0]);
            fileInfoMap.put(line[0], Integer.valueOf(line[1]));
        }
        input.close();
    }

    /** Reads and processes the MAKEFILENAME. Creates a mapping of the Rule's
     *  header to its respective command set dependencies. Also stores the
     *  targets into a list. Throws FileNotFoundException if there is no such
     *  file. */
    private static void readMakeFileName(String makefileName) throws FileNotFoundException {
        Scanner input = new Scanner(new File(makefileName));
        _targets = new ArrayList<String>();
        header = new HashMap<String, ArrayList<String>>();
        rules = new HashMap<String, ArrayList<String>>();
        String currLine = input.nextLine();
        while (input.hasNextLine()) {
            String[] line = currLine.split("\\s+");
            if (line.length != 0 && !line[0].equals("#")) {
                String target = line[0].substring(0, line[0].length() - 1);
                _targets.add(target);
                ArrayList<String> d = new ArrayList<String>();
                for (int i = 1; i < line.length; i++) {
                    d.add(line[i]);
                }
                header.put(target, d);
                ArrayList<String> duties = new ArrayList<String>();
                while (input.hasNextLine()) {
                    String line2 = input.nextLine();
                    String[] check = line2.split("\\s+");
                    if (line2.contains(":")) {
                        currLine = line2;
                        break;
                    } else if (check.length != 0 && !check[0].equals("#") && !line2.equals("")) {
                        duties.add(line2);
                    }
                }
                rules.put(target, duties);
            }
        }
        input.close();
    }

    /** Print a brief usage message and exit program abnormally. */
    private static void usage() {
        System.out.println("an error has occured");
        System.exit(1);
    }

    /** The mapping of NAMES to their respective CHANGEDATE in the 
     *  FILEINFONAME. */
    private static HashMap<String, Integer> fileInfoMap;

    /** The mapping of the Rule's target name to their respective list of
     *  command line. */
    private static HashMap<String, ArrayList<String>> rules;
    /** The mapping of the Rule's header to the rest of its command set
     *  dependencies. */
    private static HashMap<String, ArrayList<String>> header;
    /** The ArrayList of targets in the given makefile. */
    private static ArrayList<String> _targets;

    /** The current time that is in FILEINFONAME. */
    private static int currTime;

}
