package graph;

import graph.Graph.Edge;
import graph.Graph.Vertex;

import java.util.ArrayList;

/* Do not add or remove public or protected members, or modify the signatures of
 * any public methods.  You may add bodies to abstract methods, modify
 * existing bodies, or override inherited methods.  */

/** An undirected graph with vertices labeled with VLABEL and edges
 *  labeled with ELABEL.
 *  @author Allen Yu
 */
public class UndirectedGraph<VLabel, ELabel> extends Graph<VLabel, ELabel> {

    /** An empty graph. */
    public UndirectedGraph() {
    }

    @Override
    public boolean isDirected() {
        return false;
    }

    @Override
    public int outDegree(Vertex v) {
        return v.outEdges().size() + v.inEdges().size();
    }

    @Override
    public int inDegree(Vertex v) {
        return outDegree(v);
    }

    @Override
    public Iteration<Vertex> successors(Vertex v) {
        ArrayList<Vertex> allVertices = new ArrayList<Vertex>();
        allVertices.addAll(v.getChildren());
        allVertices.addAll(v.getParent());
        return Iteration.iteration(allVertices);
    }

    @Override
    public Iteration<Vertex> predecessors(Vertex v) {
        return successors(v);
    }

    @Override
    public Iteration<Edge> outEdges(Vertex v) {
        ArrayList<Edge> allEdges = new ArrayList<Edge>();
        allEdges.addAll(v.outEdges());
        allEdges.addAll(v.inEdges());
        return Iteration.iteration(allEdges);
    }

    @Override
    public Iteration<Edge> inEdges(Vertex v) {
        return outEdges(v);
    }
}
