package graph;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Comparator;
import org.junit.Test;

public class DirectedGraphTest {

    @Test
    public void generalTest() {
        DirectedGraph<String, String> G = new DirectedGraph<String, String>();
        G.add(G.add("vertex 1"), G.add("vertex 2"), "edge 1");
        G.add("vertex 3");

        Graph<String, String>.Vertex vtx1 = G.getVertex("vertex 1");

        assertEquals("wrong number of vertices in graph", G.vertexSize(), 3);
        assertEquals("wrong number of edges in graph", G.edgeSize(), 1);
        assertEquals("vertex 1 is missing", vtx1.getLabel(), "vertex 1");

        assertEquals("vertex 1 has wrong edge",
                vtx1.outEdges().get(0).getLabel(), "edge 1");

        G.remove(vtx1);
        assertEquals("wrong number of vertices after removal", G.vertexSize(), 2);
        assertEquals("wrong number of edges after removal", G.edgeSize(), 0);
        assertEquals("vertex 2 has wrong number of edges",
                G.getVertex("vertex 2").inEdges().size(), 0);
    }

    @Test
    public void orderEdgesTest() {
        DirectedGraph<String, Integer> G = new DirectedGraph<String, Integer>();
        G.add(G.add("vertex 1"), G.add("vertex 2"), 1);
        G.add(G.getVertex("vertex 2"), G.add("vertex 3"), 2);
        G.add(G.getVertex("vertex 3"), G.add("vertex 4"), 0);

        Iteration<Graph<String, Integer>.Edge> firstEdges = G.edges();
        int v1 = firstEdges.next().getLabel();
        int v2 = firstEdges.next().getLabel();
        int v3 = firstEdges.next().getLabel();
        assertEquals("wrong beginning first edge", v1, 1);
        assertEquals("wrong beginning second edge", v2, 2);
        assertEquals("wrong beginning third edge", v3, 0);

        G.orderEdges(compareInts());
        Iteration<Graph<String, Integer>.Edge> edges = G.edges();
        int val1 = edges.next().getLabel();
        int val2 = edges.next().getLabel();
        int val3 = edges.next().getLabel();
        assertEquals("wrong first edge", val1, 0);
        assertEquals("wrong second edge", val2, 1);
        assertEquals("wrong third edge", val3, 2);
    }

    /** Returns the an integer comparator that compares integers. */
    private Comparator<Integer> compareInts() {
        Comparator<Integer> comp = new Comparator<Integer>() {
            @Override
            public int compare(Integer x, Integer y) {
                if (x > y) {
                    return 1;
                } else if (y > x) {
                    return -1;
                } else {
                    return 0;
                }
            }
        };
        return comp;
    }

}
