package graph;

/* Do not add or remove public or protected members, or modify the signatures of
 * any public methods.  You may add bodies to abstract methods, modify
 * existing bodies, or override inherited methods.  */

/** An undirected graph with vertices labeled with VLABEL and edges
 *  labeled with ELABEL.
 *  @author Allen Yu
 */
public class UndirectedGraph<VLabel, ELabel> extends Graph<VLabel, ELabel> {

    /** An empty graph. */
    public UndirectedGraph() {
    }

    @Override
    public boolean isDirected() {
        return false;
    }

    @Override
    public int outDegree(Vertex v) {
        Iteration<Graph<VLabel, ELabel>.Edge> e = edges(v);
        int count = 0;
        while (e.hasNext()) {
            Graph<VLabel, ELabel>.Edge x = e.next();
            if (x.getV0() == v || x.getV1() == v) {
                count += 1;
            }
        }
        return count;
    }

    @Override
    public int inDegree(Vertex v) {
        return outDegree(v);
    }

    @Override
    public Iteration<Vertex> successors(Vertex v) {
        return vertices();
    }

    @Override
    public Iteration<Vertex> predecessors(Vertex v) {
        return successors(v);
    }

    @Override
    public Iteration<Edge> outEdges(Vertex v) {
        return edges();
    }

    @Override
    public Iteration<Edge> inEdges(Vertex v) {
        return outEdges(v);
    }
}
